{
	"info": {
		"_postman_id": "fa7ed480-0660-4ecb-bd74-694393d573eb",
		"name": "FunctionalTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create Post Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"id was assigned\", function(){ \r",
							"  pm.expect(pm.response.json().userId).to.be.not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200s\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code name has String\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\" : 1,\r\n    \"title\" : \"Test post 1\",\r\n    \"description\" : \"My first post\",\r\n    \"userLimit\" : 4,\r\n    \"status\" : 2\r\n}",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": "http://localhost:8080/v1/posts/create"
			},
			"response": []
		},
		{
			"name": "Create Comment Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"id was assigned\", function(){ \r",
							"  pm.expect(pm.response.json().userId).to.be.not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200s\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has String\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"userId\" : 5,\n\t\"postId\" : 2,\n\t\"message\" : \"API Test message\",\n\t\"parentId\" : 0,\n\t\"votes\" : 5 \n}"
				},
				"url": "http://localhost:8080/v1/comments/create"
			},
			"response": []
		},
		{
			"name": "Get post by ID Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"User\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Email\");\r",
							"    pm.expect(pm.response.text()).to.include(\"zipcode\");\r",
							"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
							"    pm.expect(pm.response.text()).to.include(\"password\");\r",
							"    pm.expect(pm.response.text()).to.include(\"bookmark\");\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"    pm.expect(pm.response.text()).to.include(\"description\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userLimit\");\r",
							"    pm.expect(pm.response.text()).to.include(\"participantNum\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Expiry\");\r",
							"    pm.expect(pm.response.text()).to.include(\"viewCount\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/v1/posts/getOne/2"
			},
			"response": []
		},
		{
			"name": "Get All user post Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"User\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Email\");\r",
							"    pm.expect(pm.response.text()).to.include(\"zipcode\");\r",
							"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
							"    pm.expect(pm.response.text()).to.include(\"password\");\r",
							"    pm.expect(pm.response.text()).to.include(\"bookmark\");\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"    pm.expect(pm.response.text()).to.include(\"description\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userLimit\");\r",
							"    pm.expect(pm.response.text()).to.include(\"participantNum\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Expiry\");\r",
							"    pm.expect(pm.response.text()).to.include(\"viewCount\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/v1/posts/getAll"
			},
			"response": []
		},
		{
			"name": "Get Comment by ID Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"postId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"    pm.expect(pm.response.text()).to.include(\"parentId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"votes\");\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/v1/comments/getOne/2"
			},
			"response": []
		},
		{
			"name": "Get All User Comments Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"postId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"message\");\r",
							"    pm.expect(pm.response.text()).to.include(\"parentId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"votes\");\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/v1/comments/getAll/1"
			},
			"response": []
		},
		{
			"name": "Delete Post Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"response is ok\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// pm.test(\"response json data should not have errors\", function () {\r",
							"//     pm.response.to.have.jsonBody();\r",
							"//     pm.response.to.not.have.jsonBody('error');\r",
							"// });\r",
							"\r",
							"pm.test(\"Status Code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/v1/posts/delete/2"
			},
			"response": []
		},
		{
			"name": "Delete Comment Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/v1/comments/delete/2"
			},
			"response": []
		},
		{
			"name": "User Register Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"user id was assigned\", function(){ \r",
							"  pm.expect(pm.response.json().userId).to.be.not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has String\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Username\": \"AdamSmith\",\r\n    \"Firstname\": \"Adam\",\r\n    \"Lastname\": \"Smith\",\r\n    \"Email\": \"Adams@gatorshare.com\",\r\n    \"Password\": \"password123\"\r\n}"
				},
				"url": "http://localhost:8080/v1/users/register"
			},
			"response": []
		},
		{
			"name": "User Login Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"user id was assigned\", function(){ \r",
							"  pm.expect(pm.response.json().userId).to.be.not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000s\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has String\", function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"AdamS\",\r\n    \"password\": \"password123\"\r\n}"
				},
				"url": "http://localhost:8080/v1/users/login"
			},
			"response": []
		},
		{
			"name": "Get User Profile Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Body matches the String\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
							"    pm.expect(pm.response.text()).to.include(\"CreatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"UpdatedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"DeletedAt\");\r",
							"    pm.expect(pm.response.text()).to.include(\"userName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Email\");\r",
							"    pm.expect(pm.response.text()).to.include(\"zipcode\");\r",
							"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
							"    pm.expect(pm.response.text()).to.include(\"password\");\r",
							"    pm.expect(pm.response.text()).to.include(\"bookmark\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{HOST_URL}}/v1/users/getProfile/"
			},
			"response": []
		},
		{
			"name": "Get User Profile Generic Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{HOST_URL}}/v1/users/getUserProfile/1"
			},
			"response": []
		}
	]
}